# This is /etc/codex-common.env, which sets environment variables used to
# configure both the workers that serve user requests, and batch processes.

###############################################################################
# Authentication                                                              #
###############################################################################
# This is the password users will log in with. Yes, it appears here
# unencrypted, but if someone's viewing this file they can probably connect
# directly to the database, so you're not hiding the team data from them.
# If you don't set this, anyone can log in just by visiting the team site,
# though they will have to guess that the empty string is the password.
# Send this to the team mailing list and/or write it on a whiteboard so
# team members can use it to log in.
; TEAM_PASSWORD="Set Me To Something"

###############################################################################
# Google Drive Integration                                                    #
###############################################################################
# This enables Google Drive integration, namely the per-puzzle spreadsheets.
# If you are running on Compute Engine, you don't need to set this, but you
# do need to request the https://www.googleapis.com/auth/drive scope for your
# VM. It's not one of the default scope choices, so while your vm is stopped,
# add it using `gcloud compute instances set-service-account $instance_name \
# --zone $zone_name --scopes default,https://www.googleapis.com/auth/drive`
# You can do this from the cloud shell.
# If you aren't running on Compute Engine, or you want to log in as a regular
# user account, install gcloud and run `gcloud auth application-default login`.
# If you want to run as a service account, put the service account's
# credential json file somwhere 'nobody:nogroup' can read it and set this to
# that path. You will probably have to enable the Drive API in the project the
# service account comes from. If you want to protect the credential better than
# that, you can edit the user and group the app runs as in
# /etc/systemd/system/codex-batch.service, then run `systemctl daemon-reload`.
; GOOGLE_APPLICATION_CREDENTIALS=???

# The name of the root folder all other files are created in.
# If unset, defaults to "MIT Mystery Hunt" plus the current year.
; DRIVE_ROOT_FOLDER="MIT Mystery Hunt 2018"
# If set, all all documents will be shared with this account.
; DRIVE_OWNER_ADDRESS=who@what.where
# The display name of the above owner. Drive doesn't tell you the e-mail
# address of other users with access to a document, just their display name,
# so when ensuring the spreadsheets have the right permissions, this is needed.
# If you set DRIVE_OWNER_ADDRESS, set this also.
; DRIVE_OWNER_NAME="Somebody Something"

# Because we run Nginx as a reverse proxy, we set this to 1.
# You should not need to change it.
HTTP_FORWARDED_COUNT=1

# The equivalent of the --settings flag when running meteor in dev mode.
# Everything non-public that could be set here can also be set by environment
# variables.
# Relevant public keys are:
# huntYear: It appears the same database can store multiple years; this
#           distinguishes them.
# defaultHost: Used to generate gravatars when an email address isn't specified.
# picker: a dict containing keys and IDs for the google drive upload functionality.
#         its keys are clientId, developerKey, and appId.
#         Get them at https://console.developers.google.com/apis/credentials.
METEOR_SETTINGS='{"public":{"huntYear":2018, "defaultHost":"{{domainname}}"} }'

# The url to the database. You shouldn't need to change these.
MONGO_OPLOG_URL=mongodb://127.0.0.1:27017/local
MONGO_URL=mongodb://127.0.0.1:27017/codex

# Meteor panics if you don't set these.
NODE_ENV=production
ROOT_URL=https://{{domainname}}